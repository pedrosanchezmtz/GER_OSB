<xsl:stylesheet version="1.0" exclude-result-prefixes=" xsd oracle-xsl-mapper xsi xsl ns0 tns UUIDUserFunction IsUserInGroupFunction oraext IsUserInRoleFunction xp20 DVMFunctions oraxsl RuntimeTypeConversionFunctions XrefFunctions BasicCredentialsUserFunction" xmlns:UUIDUserFunction="http://www.oracle.com/XSL/Transform/java/com.bea.wli.sb.stages.functions.UUIDUserFunction" xmlns:IsUserInGroupFunction="http://www.oracle.com/XSL/Transform/java/com.bea.wli.sb.stages.functions.IsUserInGroupFunction" xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:IsUserInRoleFunction="http://www.oracle.com/XSL/Transform/java/com.bea.wli.sb.stages.functions.IsUserInRoleFunction" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:DVMFunctions="http://www.oracle.com/XSL/Transform/java/com.bea.wli.sb.functions.dvm.DVMFunctions" xmlns:ns0="http://xmlns.oracle.com/pcbpel/adapter/db/top/dbaReadCountryMapping" xmlns:tns="http://soa.estrellaroja.com.mx/CatalogsTec" xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas" xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java" xmlns:RuntimeTypeConversionFunctions="http://www.oracle.com/XSL/Transform/java/com.bea.wli.sb.stages.functions.RuntimeTypeConversionFunctions" xmlns:XrefFunctions="http://www.oracle.com/XSL/Transform/java/com.bea.wli.sb.functions.xref.XrefFunctions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:BasicCredentialsUserFunction="http://www.oracle.com/XSL/Transform/java/com.bea.wli.sb.stages.functions.BasicCredentialsUserFunction" xmlns:cmn="http://soa.estrellaroja.com.mx/EstrellaRojaCommons">
   <oracle-xsl-mapper:schema>
      <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
      <oracle-xsl-mapper:mapSources>
         <oracle-xsl-mapper:source type="XSD">
            <oracle-xsl-mapper:schema location="../Schemas/External/dbaReadCountryMapping_table.xsd"/>
            <oracle-xsl-mapper:rootElement name="XxerCountriesMappingCollection" namespace="http://xmlns.oracle.com/pcbpel/adapter/db/top/dbaReadCountryMapping"/>
         </oracle-xsl-mapper:source>
      </oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:mapTargets>
         <oracle-xsl-mapper:target type="XSD">
            <oracle-xsl-mapper:schema location="../Schemas/CatalogsTec.xsd"/>
            <oracle-xsl-mapper:rootElement name="GetCountryCodeRs" namespace="http://soa.estrellaroja.com.mx/CatalogsTec"/>
         </oracle-xsl-mapper:target>
      </oracle-xsl-mapper:mapTargets>
      <!--GENERATED BY ORACLE XSL MAPPER 12.2.1.2.0(XSLT Build 161003.0739.0018) AT [WED DEC 27 13:50:46 CST 2017].-->
   </oracle-xsl-mapper:schema>
   <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
   <xsl:template match="/">
      <tns:GetCountryCodeRs>
         <xsl:if test="count (/ns0:XxerCountriesMappingCollection/ns0:XxerCountriesMapping ) > 0">
            <cmn:Success/>
         </xsl:if>
         <xsl:if test="count (/ns0:XxerCountriesMappingCollection/ns0:XxerCountriesMapping ) = 0">
            <cmn:Errors/>
         </xsl:if>
         <xsl:if test="string-length (/ns0:XxerCountriesMappingCollection/ns0:XxerCountriesMapping/ns0:country ) > 0">
            <tns:Return>
               <xsl:for-each select="/ns0:XxerCountriesMappingCollection/ns0:XxerCountriesMapping">
                  <tns:Country>
                     <tns:Country>
                        <xsl:value-of select="ns0:country"/>
                     </tns:Country>
                     <xsl:if test="ns0:countryName">
                        <tns:CountryName>
                           <xsl:value-of select="ns0:countryName"/>
                        </tns:CountryName>
                     </xsl:if>
                     <xsl:if test="ns0:countryCode">
                        <tns:CountryCode>
                           <xsl:value-of select="ns0:countryCode"/>
                        </tns:CountryCode>
                     </xsl:if>
                     <xsl:if test="ns0:isoCountryCode">
                        <tns:IsoCountryCode>
                           <xsl:value-of select="ns0:isoCountryCode"/>
                        </tns:IsoCountryCode>
                     </xsl:if>
                     <xsl:if test="ns0:createdBy">
                        <tns:CreatedBy>
                           <xsl:value-of select="ns0:createdBy"/>
                        </tns:CreatedBy>
                     </xsl:if>
                     <xsl:if test="ns0:createdDate">
                        <tns:CreatedDate>
                           <xsl:value-of select="ns0:createdDate"/>
                        </tns:CreatedDate>
                     </xsl:if>
                     <xsl:if test="ns0:updatedDate">
                        <tns:UpdatedDate>
                           <xsl:value-of select="ns0:updatedDate"/>
                        </tns:UpdatedDate>
                     </xsl:if>
                     <xsl:if test="ns0:atttribute1">
                        <tns:Atttribute1>
                           <xsl:if test="ns0:atttribute1/@xsi:nil">
                              <xsl:attribute name="nil" namespace="http://www.w3.org/2001/XMLSchema-instance">
                                 <xsl:value-of select="ns0:atttribute1/@xsi:nil"/>
                              </xsl:attribute>
                           </xsl:if>
                           <xsl:value-of select="ns0:atttribute1"/>
                        </tns:Atttribute1>
                     </xsl:if>
                     <xsl:if test="ns0:atttribute2">
                        <tns:Atttribute2>
                           <xsl:if test="ns0:atttribute2/@xsi:nil">
                              <xsl:attribute name="nil" namespace="http://www.w3.org/2001/XMLSchema-instance">
                                 <xsl:value-of select="ns0:atttribute2/@xsi:nil"/>
                              </xsl:attribute>
                           </xsl:if>
                           <xsl:value-of select="ns0:atttribute2"/>
                        </tns:Atttribute2>
                     </xsl:if>
                     <xsl:if test="ns0:atttribute3">
                        <tns:Atttribute3>
                           <xsl:if test="ns0:atttribute3/@xsi:nil">
                              <xsl:attribute name="nil" namespace="http://www.w3.org/2001/XMLSchema-instance">
                                 <xsl:value-of select="ns0:atttribute3/@xsi:nil"/>
                              </xsl:attribute>
                           </xsl:if>
                           <xsl:value-of select="ns0:atttribute3"/>
                        </tns:Atttribute3>
                     </xsl:if>
                     <xsl:if test="ns0:atttribute4">
                        <tns:Atttribute4>
                           <xsl:if test="ns0:atttribute4/@xsi:nil">
                              <xsl:attribute name="nil" namespace="http://www.w3.org/2001/XMLSchema-instance">
                                 <xsl:value-of select="ns0:atttribute4/@xsi:nil"/>
                              </xsl:attribute>
                           </xsl:if>
                           <xsl:value-of select="ns0:atttribute4"/>
                        </tns:Atttribute4>
                     </xsl:if>
                     <xsl:if test="ns0:atttribute5">
                        <tns:Atttribute5>
                           <xsl:if test="ns0:atttribute5/@xsi:nil">
                              <xsl:attribute name="nil" namespace="http://www.w3.org/2001/XMLSchema-instance">
                                 <xsl:value-of select="ns0:atttribute5/@xsi:nil"/>
                              </xsl:attribute>
                           </xsl:if>
                           <xsl:value-of select="ns0:atttribute5"/>
                        </tns:Atttribute5>
                     </xsl:if>
                  </tns:Country>
               </xsl:for-each>
            </tns:Return>
         </xsl:if>
      </tns:GetCountryCodeRs>
   </xsl:template>
</xsl:stylesheet>